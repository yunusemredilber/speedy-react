{"version":3,"sources":["sections/common/styles.module.css","components/slider/slider.module.css","components/typography/typography.module.css","components/icon-button/icon-button.module.css","components/button/button.module.css","containers/section/section.module.css","components/code-block/code-block.module.css","sections/rendering-with-context/rendering-with-context.module.css","containers/app/app.module.css","components/code-with-result/code-with-result.module.css","containers/text-section/text-section.module.css","assets/icons/arrow-left.svg","components/icon-button/icon-button.tsx","assets/icons/arrow-right.svg","components/slider/slider.tsx","hooks/use-list-pagination.ts","components/code-block/code-block.tsx","components/typography/typography.tsx","components/typography/code.tsx","containers/section/section.tsx","sections/painting-renders/painting-renders.tsx","sections/painting-renders/use-render-paint.ts","hooks/use-render-paint.ts","components/button/button.tsx","sections/change-in-the-state/counter.tsx","components/code-with-result/code-with-result.tsx","sections/change-in-the-state/change-in-the-state.tsx","sections/common/circle.tsx","sections/change-in-the-props/counter.tsx","sections/change-in-the-props/change-in-the-props.tsx","sections/rendering-of-parent/counter.tsx","sections/rendering-of-parent/rendering-of-parent.tsx","containers/text-section/text-section.tsx","assets/diagrams/component-tree-1.svg","assets/diagrams/component-tree-2.svg","assets/diagrams/component-tree-3.svg","sections/render-behavior/render-behavior.tsx","sections/memo/counter.tsx","sections/memo/memo.tsx","sections/new-references-in-props/counter.tsx","sections/new-references-in-props/new-references-in-props.tsx","sections/memo-custom-comparison/counter.tsx","sections/memo-custom-comparison/memo-custom-comparison.tsx","sections/use-memo/counter.tsx","sections/use-memo/use-memo.tsx","sections/use-memo-for-components/counter.tsx","sections/use-memo-for-components/use-memo-for-components.tsx","hooks/use-list.ts","sections/lists/list.tsx","sections/lists/lists.tsx","sections/use-callback/counter.tsx","sections/use-callback/use-callback.tsx","assets/diagrams/context-component-tree-1.svg","assets/diagrams/context-component-tree-2.svg","assets/diagrams/context-component-tree-3.svg","sections/context-rendering-behavior/context-rendering-behavior.tsx","sections/rendering-with-context/counter.tsx","sections/rendering-with-context/rendering-with-context.tsx","containers/app/app.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","_path","_path2","sizes","small","styles","medium","large","IconButton","children","className","size","buttonProps","clsx","button","displayName","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgArrowLeft","_ref","svgRef","title","titleId","props","xmlns","viewBox","width","height","ref","id","fill","d","ForwardRef","SvgArrowRight","Slider","slides","useState","current","setCurrent","before","beforeIndex","next","nextIndex","useListPagination","container","slider","slideList","style","transform","map","slide","slideItem","prevButton","onClick","nextButton","bottomControls","pageInfo","CodeBlock","code","defaultProps","theme","trim","language","tokens","getLineProps","getTokenProps","pre","line","token","variants","h1","h2","h3","p","Typography","variant","paragraphProps","Tag","Section","header","secondHeader","content","PaintingRenders","useRenderPaint","useRef","useEffect","console","log","el","classList","remove","offsetWidth","add","onAnimationEnd","Button","Counter","counter","setCounter","targetProps","CodeWithResult","ChangeInTheState","Circle","text","circle","CircleText","CounterAndCircleText","ChangeInTheProps","RenderingOfParent","TextSection","RenderBehavior","src","componentTree1","alt","componentTree2","componentTree3","MemoizedCircle","memo","Memo","backgroundColor","NewReferencesInProps","areEqual","prevProps","nextProps","MemoCustomComparison","useMemo","UseMemo","counter1","setCounter1","memoizedCircle","UseMemoForComponents","useList","initialList","list","setList","shuffle","shuffled","value","sort","Math","random","a","b","items","Item","listItem","MemoizedItem","List1","List2","List3","Lists","IncreaseButton","MemoizedIncreaseButton","Counter1","Counter2","memoizedOnClick","useCallback","Counter3","UseCallback","ContextRenderingBehavior","contextComponentTree1","contextComponentTree2","contextComponentTree3","defaultContext","CounterContext","createContext","WithCounter","Provider","CounterControl1","counterValues","counterControl","CounterControl2","useContext","CounterApp1","CounterApp2","RenderingWithContext","App","reportWebVitals","onPerfEntry","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","Error","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.ecb1aa04.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"circle\":\"styles_circle__23pis\",\"listItem\":\"styles_listItem__29jRK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"slider_container__2Tm_d\",\"slider\":\"slider_slider__1Z4te\",\"slideList\":\"slider_slideList__1MEFm\",\"slideItem\":\"slider_slideItem__369bU\",\"bottomControls\":\"slider_bottomControls__2ih8l\",\"prevButton\":\"slider_prevButton__J1jzA\",\"nextButton\":\"slider_nextButton__3CSNt\",\"pageInfo\":\"slider_pageInfo__WiG4W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"h1\":\"typography_h1__2pCSS\",\"h2\":\"typography_h2__2txj9\",\"h3\":\"typography_h3__3w59z\",\"p\":\"typography_p__2TMZ5\",\"code\":\"typography_code__2OsUI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"icon-button_button__1KItp\",\"small\":\"icon-button_small__1F21-\",\"medium\":\"icon-button_medium__33AkB\",\"large\":\"icon-button_large__3Qu0R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"button_button__3_GL1\",\"small\":\"button_small__14mQu\",\"medium\":\"button_medium__2JYYh\",\"large\":\"button_large__29CND\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"section_container__29xD-\",\"content\":\"section_content__2Wjr2\",\"header\":\"section_header__V7XDB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"code-block_container__1-_uX\",\"pre\":\"code-block_pre__3poao\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterControl\":\"rendering-with-context_counterControl__2uhjp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__iAXZ0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"code-with-result_container__3NBEc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"text-section_container__3_FID\"};","var _path, _path2;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgArrowLeft(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    width: 24,\n    height: 24,\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"none\",\n    d: \"M0 0h24v24H0z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M10.828 12l4.95 4.95-1.414 1.414L8 12l6.364-6.364 1.414 1.414z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrowLeft);\nexport default __webpack_public_path__ + \"static/media/arrow-left.2d52f05c.svg\";\nexport { ForwardRef as ReactComponent };","import { ButtonHTMLAttributes, FunctionComponent } from \"react\"\nimport styles from \"./icon-button.module.css\"\nimport clsx from \"clsx\"\n\nconst sizes = {\n  small: styles.small,\n  medium: styles.medium,\n  large: styles.large,\n}\n\ninterface Props extends ButtonHTMLAttributes<HTMLButtonElement> {\n  className?: string\n  size?: keyof typeof sizes\n}\n\nconst IconButton: FunctionComponent<Props> = ({\n  children,\n  className,\n  size = \"small\",\n  ...buttonProps\n}) => {\n  return (\n    <button\n      className={clsx([styles.button, sizes[size] || sizes.small, className])}\n      {...buttonProps}\n    >\n      {children}\n    </button>\n  )\n}\n\nIconButton.displayName = \"IconButton\"\n\nexport { IconButton }\n","var _path, _path2;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgArrowRight(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 24 24\",\n    width: 24,\n    height: 24,\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"none\",\n    d: \"M0 0h24v24H0z\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M13.172 12l-4.95-4.95 1.414-1.414L16 12l-6.364 6.364-1.414-1.414z\"\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgArrowRight);\nexport default __webpack_public_path__ + \"static/media/arrow-right.e425b2c0.svg\";\nexport { ForwardRef as ReactComponent };","import { FunctionComponent, ReactElement } from \"react\"\nimport styles from \"./slider.module.css\"\nimport { useListPagination } from \"../../hooks/use-list-pagination\"\nimport { IconButton } from \"../icon-button\"\nimport { ArrowLeft, ArrowRight } from \"../icon\"\n\ninterface Props {\n  slides: ReactElement[]\n}\n\nconst Slider: FunctionComponent<Props> = ({ slides }) => {\n  const { current, before, next } = useListPagination(slides.length)\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.slider}>\n        <ul\n          className={styles.slideList}\n          style={{\n            transform: `translate3d(calc(-${current} * var(--carousel-width, 0)), 0, 0)`,\n          }}\n        >\n          {slides.map((slide) => (\n            <li key={slide.key} className={styles.slideItem}>\n              {slide}\n            </li>\n          ))}\n        </ul>\n      </div>\n      <IconButton className={styles.prevButton} onClick={before}>\n        <ArrowLeft />\n      </IconButton>\n      <IconButton className={styles.nextButton} onClick={next}>\n        <ArrowRight />\n      </IconButton>\n      <div className={styles.bottomControls}>\n        <IconButton onClick={before}>\n          <ArrowLeft />\n        </IconButton>\n        <IconButton onClick={next}>\n          <ArrowRight />\n        </IconButton>\n      </div>\n      <div className={styles.pageInfo}>\n        {current + 1} / {slides.length}\n      </div>\n    </div>\n  )\n}\n\nSlider.displayName = \"Slider\"\n\nexport { Slider }\n","import { useState } from \"react\"\n\nfunction useListPagination(length: number): {\n  current: number\n  setCurrent: (current: number) => void\n  before: () => void\n  next: () => void\n} {\n  const [current, setCurrent] = useState(0)\n\n  const next = (): void => {\n    const nextIndex = current + 1\n    if (nextIndex === length) {\n      setCurrent(0)\n      return\n    }\n\n    setCurrent(nextIndex)\n  }\n\n  const before = (): void => {\n    const beforeIndex = current - 1\n    if (beforeIndex < 0) {\n      setCurrent(length - 1)\n      return\n    }\n\n    setCurrent(beforeIndex)\n  }\n\n  return { current, setCurrent, before, next }\n}\n\nexport { useListPagination }\n","import { FunctionComponent } from \"react\"\nimport styles from \"./code-block.module.css\"\nimport Highlight, { defaultProps } from \"prism-react-renderer\"\nimport theme from \"prism-react-renderer/themes/nightOwl\"\nimport clsx from \"clsx\"\n\ninterface Props {\n  code: string\n}\n\nconst CodeBlock: FunctionComponent<Props> = ({ code }) => {\n  return (\n    <div className={styles.container}>\n      <Highlight\n        {...defaultProps}\n        theme={theme}\n        code={code.trim()}\n        language=\"jsx\"\n      >\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\n          <pre className={clsx([styles.pre, className])} style={style}>\n            {tokens.map((line, i) => (\n              <div {...getLineProps({ line, key: i })}>\n                {line.map((token, key) => (\n                  <span {...getTokenProps({ token, key })} />\n                ))}\n              </div>\n            ))}\n          </pre>\n        )}\n      </Highlight>\n    </div>\n  )\n}\n\nCodeBlock.displayName = \"CodeBlock\"\n\nexport { CodeBlock }\n","import React, { FunctionComponent } from \"react\"\nimport styles from \"./typography.module.css\"\nimport clsx from \"clsx\"\n\nconst variants = {\n  h1: styles.h1,\n  h2: styles.h2,\n  h3: styles.h3,\n  p: styles.p,\n  code: styles.code,\n}\n\ninterface Props extends React.HTMLAttributes<HTMLParagraphElement> {\n  variant?: keyof typeof variants\n}\n\nconst Typography: FunctionComponent<Props> = ({\n  variant = \"p\",\n  className,\n  children,\n  ...paragraphProps\n}) => {\n  const Tag = variant\n\n  return (\n    <Tag className={clsx([variants[variant], className])} {...paragraphProps}>\n      {children}\n    </Tag>\n  )\n}\n\nTypography.displayName = \"Typography\"\n\nexport { Typography }\n","import { FunctionComponent } from \"react\"\nimport { Typography } from \"./typography\"\n\nconst Code: FunctionComponent = ({ children }) => {\n  return <Typography variant=\"code\">{children}</Typography>\n}\n\nCode.displayName = \"Code\"\n\nexport { Code }\n","import { FunctionComponent } from \"react\"\nimport styles from \"./section.module.css\"\nimport { Typography } from \"../../components/typography\"\n\ninterface Props {\n  header: string\n  secondHeader: string\n}\n\nconst Section: FunctionComponent<Props> = ({\n  children,\n  header,\n  secondHeader,\n}) => {\n  return (\n    <section className={styles.container}>\n      <header className={styles.header}>\n        <Typography variant=\"h1\">{header}</Typography>\n        <Typography variant=\"h2\">{secondHeader}</Typography>\n      </header>\n      <div className={styles.content}>{children}</div>\n    </section>\n  )\n}\n\nSection.displayName = \"Section\"\n\nexport { Section }\n","import React, { FunctionComponent } from \"react\"\nimport { CodeBlock } from \"../../components/code-block\"\nimport { Typography } from \"../../components/typography\"\nimport { useRenderPaintText } from \"./use-render-paint\"\nimport { Section } from \"../../containers/section\"\n\nconst PaintingRenders: FunctionComponent = () => {\n  return (\n    <Section header=\"Painting Renders\" secondHeader=\"useRenderPaint hook\">\n      <div>\n        <Typography variant=\"p\">\n          Let's examine the code below which is a custom react hook:\n        </Typography>\n        <CodeBlock code={useRenderPaintText} />\n      </div>\n    </Section>\n  )\n}\n\nPaintingRenders.displayName = \"PaintingRenders\"\n\nexport { PaintingRenders }\n","export const useRenderPaintText = `\nconst useRenderPaint = () => {\n  const ref = useRef(null)\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n    console.log(\"(re)rendering...\")\n\n    ref.current.classList.remove(\"highlight\")\n    void ref.current.offsetWidth // Enough time to wait\n    ref.current.classList.add(\"highlight\")\n  }) // No dependency array\n\n  const onAnimationEnd = () => {\n    if (!ref.current) {\n      return\n    }\n\n    ref.current.classList.remove(\"highlight\")\n  }\n\n  return { ref, onAnimationEnd, \"data-highlightable\": true }\n}\n\nexport { useRenderPaint }\n`\n","import { MutableRefObject, useEffect, useRef } from \"react\"\n\nconst useRenderPaint = <ElementType>(): {\n  ref: MutableRefObject<ElementType | null>\n  onAnimationEnd: () => void\n  \"data-highlightable\": boolean\n} => {\n  const ref = useRef<ElementType>(null)\n\n  useEffect(() => {\n    if (!ref.current) {\n      return\n    }\n\n    console.log(\"(re)rendering...\")\n\n    const el = ref.current as unknown as HTMLElement\n\n    el.classList.remove(\"highlight\")\n    void el.offsetWidth // Enough time to wait\n    el.classList.add(\"highlight\")\n  })\n\n  const onAnimationEnd = () => {\n    if (!ref.current) {\n      return\n    }\n\n    const el = ref.current as unknown as HTMLElement\n\n    el.classList.remove(\"highlight\")\n  }\n\n  return { ref, onAnimationEnd, \"data-highlightable\": true }\n}\n\nexport { useRenderPaint }\n","import { ButtonHTMLAttributes, FunctionComponent } from \"react\"\nimport styles from \"./button.module.css\"\nimport clsx from \"clsx\"\n\nconst sizes = {\n  small: styles.small,\n  medium: styles.medium,\n  large: styles.large,\n}\n\ninterface Props extends ButtonHTMLAttributes<HTMLButtonElement> {\n  className?: string\n  size?: keyof typeof sizes\n}\n\nconst Button: FunctionComponent<Props> = ({\n  children,\n  className,\n  size = \"small\",\n  ...buttonProps\n}) => {\n  return (\n    <button\n      className={clsx([styles.button, sizes[size] || sizes.small, className])}\n      {...buttonProps}\n    >\n      {children}\n    </button>\n  )\n}\n\nButton.displayName = \"Button\"\n\nexport { Button }\n","import { FunctionComponent, useState } from \"react\"\nimport { useRenderPaint } from \"../../hooks/use-render-paint\"\nimport { Button } from \"../../components/button\"\n\nexport const CounterText = `\nconst Counter = () => {\n  const [counter, setCounter] = useState(0)\n  const targetProps = useRenderPaint()\n  return (\n    <div {...targetProps}>\n      <Button onClick={() => setCounter(counter + 1)}>\n        Increase\n      </Button>\n      <p>{counter}</p>\n    </div>\n  )\n}\n\nexport { Counter }\n`\n\nconst Counter: FunctionComponent = () => {\n  const [counter, setCounter] = useState(0)\n  const targetProps = useRenderPaint<HTMLDivElement>()\n  return (\n    <div {...targetProps}>\n      <Button onClick={() => setCounter(counter + 1)}>Increase</Button>\n      <p>{counter}</p>\n    </div>\n  )\n}\n\nexport { Counter }\n","import { FunctionComponent } from \"react\"\nimport styles from \"./code-with-result.module.css\"\nimport { CodeBlock } from \"../code-block\"\n\ninterface Props {\n  code: string\n}\n\nconst CodeWithResult: FunctionComponent<Props> = ({ code, children }) => {\n  return (\n    <div className={styles.container}>\n      <CodeBlock code={code} />\n      {children}\n    </div>\n  )\n}\n\nCodeWithResult.displayName = \"CodeWithResult\"\n\nexport { CodeWithResult }\n","import { FunctionComponent } from \"react\"\nimport { Typography } from \"../../components/typography\"\nimport { Counter, CounterText } from \"./counter\"\nimport { Section } from \"../../containers/section\"\nimport { CodeWithResult } from \"../../components/code-with-result\"\n\nconst ChangeInTheState: FunctionComponent = () => {\n  return (\n    <Section header=\"Causes of Re-rendering\" secondHeader=\"Change in the state\">\n      <div>\n        <Typography variant=\"p\">\n          Let's see what happened if we try to change a state:\n        </Typography>\n        <CodeWithResult code={CounterText}>\n          <Counter />\n        </CodeWithResult>\n      </div>\n    </Section>\n  )\n}\n\nChangeInTheState.displayName = \"ChangeInTheState\"\n\nexport { ChangeInTheState }\n","import React, { FunctionComponent } from \"react\"\nimport { useRenderPaint } from \"../../hooks/use-render-paint\"\nimport styles from \"./styles.module.css\"\n\ninterface Props {\n  text: string | number\n}\n\nconst Circle: FunctionComponent<Props> = ({ text }) => {\n  const targetProps = useRenderPaint<HTMLDivElement>()\n\n  return (\n    <div className={styles.circle} {...targetProps}>\n      {text}\n    </div>\n  )\n}\n\nCircle.displayName = \"Circle\"\n\nconst CircleText = `\nconst Circle = ({ text }) => {\n  const targetProps = useRenderPaint()\n\n  return (\n    <div className={styles.circle} {...targetProps}>\n      {text}\n    </div>\n  )\n}\n`\n\nexport { Circle, CircleText }\n","import { FunctionComponent, useState } from \"react\"\nimport { Button } from \"../../components/button\"\nimport { Circle, CircleText } from \"../common/circle\"\n\nexport const CounterAndCircleText = `\n${CircleText}\n\nconst Counter = () => {\n  const [counter, setCounter] = useState(0)\n\n  return (\n    <div>\n      <Button onClick={() => setCounter(counter + 1)}>\n        Increase\n      </Button>\n      <Circle text={counter} />\n    </div>\n  )\n}\n\nexport { Counter }\n`\n\nconst Counter: FunctionComponent = () => {\n  const [counter, setCounter] = useState(0)\n\n  return (\n    <div>\n      <Button onClick={() => setCounter(counter + 1)}>Increase</Button>\n      <Circle text={counter} />\n    </div>\n  )\n}\n\nexport { Counter }\n","import { FunctionComponent } from \"react\"\nimport { Typography } from \"../../components/typography\"\nimport { Counter, CounterAndCircleText } from \"./counter\"\nimport { Section } from \"../../containers/section\"\nimport { CodeWithResult } from \"../../components/code-with-result\"\n\nconst ChangeInTheProps: FunctionComponent = () => {\n  return (\n    <Section header=\"Causes of Re-rendering\" secondHeader=\"Change in the props\">\n      <div>\n        <Typography variant=\"p\">\n          Let's see what happens when the given prop changes:\n        </Typography>\n        <CodeWithResult code={CounterAndCircleText}>\n          <Counter />\n        </CodeWithResult>\n      </div>\n    </Section>\n  )\n}\n\nChangeInTheProps.displayName = \"ChangeInTheProps\"\n\nexport { ChangeInTheProps }\n","import { FunctionComponent, useState } from \"react\"\nimport { Button } from \"../../components/button\"\nimport { Circle, CircleText } from \"../common/circle\"\n\nexport const CounterAndCircleText = `\n${CircleText}\n\nconst Counter = () => {\n  const [counter, setCounter] = useState(0)\n\n  return (\n    <div>\n      <Button onClick={() => setCounter(counter + 1)}>\n        Increase {counter}\n      </Button>\n      <Circle text=\"hi\" />\n    </div>\n  )\n}\n\nexport { Counter }\n`\n\nconst Counter: FunctionComponent = () => {\n  const [counter, setCounter] = useState(0)\n\n  return (\n    <div>\n      <Button onClick={() => setCounter(counter + 1)}>\n        Increase {counter}\n      </Button>\n      <Circle text=\"hi\" />\n    </div>\n  )\n}\n\nexport { Counter }\n","import { FunctionComponent } from \"react\"\nimport { Typography } from \"../../components/typography\"\nimport { Counter, CounterAndCircleText } from \"./counter\"\nimport { Section } from \"../../containers/section\"\nimport { CodeWithResult } from \"../../components/code-with-result\"\n\nconst RenderingOfParent: FunctionComponent = () => {\n  return (\n    <Section header=\"Causes of Re-rendering\" secondHeader=\"Rendering of parent\">\n      <div>\n        <Typography variant=\"p\">What if the given prop was same:</Typography>\n        <CodeWithResult code={CounterAndCircleText}>\n          <Counter />\n        </CodeWithResult>\n      </div>\n    </Section>\n  )\n}\n\nRenderingOfParent.displayName = \"RenderingOfParent\"\n\nexport { RenderingOfParent }\n","import { FunctionComponent } from \"react\"\nimport styles from \"./text-section.module.css\"\nimport { Typography } from \"../../components/typography\"\n\ninterface Props {\n  header?: string\n  secondHeader?: string\n  text?: string\n}\n\nconst TextSection: FunctionComponent<Props> = ({\n  text,\n  header,\n  secondHeader,\n  children,\n}) => {\n  return (\n    <section className={styles.container}>\n      {header && <Typography variant=\"h1\">{header}</Typography>}\n      {secondHeader && <Typography variant=\"h2\">{secondHeader}</Typography>}\n      {text && <Typography variant=\"p\">{text}</Typography>}\n      {children}\n    </section>\n  )\n}\n\nTextSection.displayName = \"TextSection\"\n\nexport { TextSection }\n","export default __webpack_public_path__ + \"static/media/component-tree-1.4e6e4967.svg\";","export default __webpack_public_path__ + \"static/media/component-tree-2.334d251a.svg\";","export default __webpack_public_path__ + \"static/media/component-tree-3.9e5ea962.svg\";","import { FunctionComponent } from \"react\"\nimport { Typography } from \"../../components/typography\"\nimport { Section } from \"../../containers/section\"\nimport componentTree1 from \"../../assets/diagrams/component-tree-1.svg\"\nimport componentTree2 from \"../../assets/diagrams/component-tree-2.svg\"\nimport componentTree3 from \"../../assets/diagrams/component-tree-3.svg\"\n\nconst RenderBehavior: FunctionComponent = () => {\n  return (\n    <Section header=\"Render Behavior\" secondHeader=\"Standard render behavior\">\n      <div>\n        <Typography variant=\"p\">\n          The component tree from previous example is something like this:\n        </Typography>\n        <img src={componentTree1} alt=\"\" />\n        <Typography variant=\"p\">\n          The user clicks a button in Counter that increments a counter:\n        </Typography>\n        <img src={componentTree2} alt=\"\" />\n        <Typography variant=\"p\">\n          div was not originally marked as needing an update. However, because\n          its parent Counter rendered, React now moves downwards and renders\n          div, Button and Circle as well.\n        </Typography>\n        <img src={componentTree3} alt=\"\" />\n      </div>\n    </Section>\n  )\n}\n\nRenderBehavior.displayName = \"RenderBehavior\"\n\nexport { RenderBehavior }\n","import { FunctionComponent, useState, memo } from \"react\"\nimport { Button } from \"../../components/button\"\nimport { Circle } from \"../common/circle\"\n\nexport const CounterAndCircleText = `\nconst MemoizedCircle = React.memo(Circle)\n\nconst Counter = () => {\n  const [counter, setCounter] = useState(0)\n\n  return (\n    <div>\n      <Button onClick={() => setCounter(counter + 1)}>\n        Increase {counter}\n      </Button>\n      <Circle text=\"hi\" />\n      <MemoizedCircle text=\"hi\" />\n    </div>\n  )\n}\n\nexport { Counter }\n`\n\nconst MemoizedCircle = memo(Circle)\n\nconst Counter: FunctionComponent = () => {\n  const [counter, setCounter] = useState(0)\n\n  return (\n    <div>\n      <Button onClick={() => setCounter(counter + 1)}>\n        Increase {counter}\n      </Button>\n      <Circle text=\"hi\" />\n      <MemoizedCircle text=\"hi\" />\n    </div>\n  )\n}\n\nexport { Counter }\n","import { FunctionComponent } from \"react\"\nimport { Typography } from \"../../components/typography\"\nimport { Counter, CounterAndCircleText } from \"./counter\"\nimport { Section } from \"../../containers/section\"\nimport { CodeWithResult } from \"../../components/code-with-result\"\n\nconst Memo: FunctionComponent = () => {\n  return (\n    <Section header=\"Memo\" secondHeader=\"Introduction to memo\">\n      <div>\n        <Typography variant=\"p\">\n          Let's see what happens if we try to use React.memo hoc:\n        </Typography>\n        <CodeWithResult code={CounterAndCircleText}>\n          <Counter />\n        </CodeWithResult>\n      </div>\n      <Typography variant=\"p\">\n        It is preventing <b>the wasted renders!</b>\n      </Typography>\n    </Section>\n  )\n}\n\nMemo.displayName = \"Memo\"\n\nexport { Memo }\n","import { FunctionComponent, useState, memo, CSSProperties } from \"react\"\nimport { useRenderPaint } from \"../../hooks/use-render-paint\"\nimport { Button } from \"../../components/button\"\nimport styles from \"../common/styles.module.css\"\n\nexport const CounterAndCircleText = `\nconst MemoizedCircle = React.memo(Circle)\n\nconst Counter = () => {\n  const [counter, setCounter] = useState(0)\n\n  return (\n    <div>\n      <Button onClick={() => setCounter(counter + 1)}>\n        Increase {counter}\n      </Button>\n      <MemoizedCircle text=\"hi\" />\n      <MemoizedCircle\n       text=\"hi\"\n       style={{ backgroundColor: \"#666\" }}\n       />\n    </div>\n  )\n}\n\nexport { Counter }\n`\n\nconst Circle: FunctionComponent<{\n  text: string | number\n  style?: CSSProperties\n}> = ({ text, style }) => {\n  const targetProps = useRenderPaint<HTMLDivElement>()\n\n  return (\n    <div className={styles.circle} style={style} {...targetProps}>\n      {text}\n    </div>\n  )\n}\n\nconst MemoizedCircle = memo(Circle)\n\nconst Counter: FunctionComponent = () => {\n  const [counter, setCounter] = useState(0)\n\n  return (\n    <div>\n      <Button onClick={() => setCounter(counter + 1)}>\n        Increase {counter}\n      </Button>\n      <MemoizedCircle text=\"hi\" />\n      <MemoizedCircle text=\"hi\" style={{ backgroundColor: \"#666\" }} />\n    </div>\n  )\n}\n\nexport { Counter }\n","import { FunctionComponent } from \"react\"\nimport { Typography } from \"../../components/typography\"\nimport { Counter, CounterAndCircleText } from \"./counter\"\nimport { Section } from \"../../containers/section\"\nimport { CodeWithResult } from \"../../components/code-with-result\"\n\nconst NewReferencesInProps: FunctionComponent = () => {\n  return (\n    <Section header=\"Memo\" secondHeader=\"Passing new references down as props\">\n      <div>\n        <Typography variant=\"p\">\n          Let's examine behavior of memo with a similar example:\n        </Typography>\n        <CodeWithResult code={CounterAndCircleText}>\n          <Counter />\n        </CodeWithResult>\n      </div>\n    </Section>\n  )\n}\n\nNewReferencesInProps.displayName = \"NewReferencesInProps\"\n\nexport { NewReferencesInProps }\n","import { FunctionComponent, useState, memo, CSSProperties } from \"react\"\nimport { useRenderPaint } from \"../../hooks/use-render-paint\"\nimport { Button } from \"../../components/button\"\nimport styles from \"../common/styles.module.css\"\n\nexport const CounterAndCircleText = `\nconst areEqual = (prevProps, nextProps) => {\n  return prevProps.text === nextProps.text\n}\n\nconst MemoizedCircle = memo(Circle, areEqual)\n\nconst Counter = () => {\n  const [counter, setCounter] = useState(0)\n\n  return (\n    <div>\n      <Button onClick={() => setCounter(counter + 1)}>\n        Increase {counter}\n      </Button>\n      <MemoizedCircle text={counter} />\n      <MemoizedCircle\n       text=\"hi\"\n       style={{ backgroundColor: \"#666\" }}\n       />\n    </div>\n  )\n}\n\nexport { Counter }\n`\n\nconst Circle: FunctionComponent<{\n  text: string | number\n  style?: CSSProperties\n}> = ({ text, style }) => {\n  const targetProps = useRenderPaint<HTMLDivElement>()\n\n  return (\n    <div className={styles.circle} style={style} {...targetProps}>\n      {text}\n    </div>\n  )\n}\n\nconst areEqual = (prevProps: any, nextProps: any) => {\n  return prevProps.text === nextProps.text\n}\n\nconst MemoizedCircle = memo(Circle, areEqual)\n\nconst Counter: FunctionComponent = () => {\n  const [counter, setCounter] = useState(0)\n\n  return (\n    <div>\n      <Button onClick={() => setCounter(counter + 1)}>\n        Increase {counter}\n      </Button>\n      <MemoizedCircle text={counter} />\n      <MemoizedCircle text=\"hi\" style={{ backgroundColor: \"#666\" }} />\n    </div>\n  )\n}\n\nexport { Counter }\n","import { FunctionComponent } from \"react\"\nimport { Typography } from \"../../components/typography\"\nimport { Counter, CounterAndCircleText } from \"./counter\"\nimport { Section } from \"../../containers/section\"\nimport { CodeWithResult } from \"../../components/code-with-result\"\n\nconst MemoCustomComparison: FunctionComponent = () => {\n  return (\n    <Section header=\"Memo\" secondHeader=\"Comparing props\">\n      <div>\n        <Typography variant=\"p\">\n          We can provide a custom comparison function as the second argument:\n        </Typography>\n        <CodeWithResult code={CounterAndCircleText}>\n          <Counter />\n        </CodeWithResult>\n      </div>\n      <Typography variant=\"p\">\n        - By default, memo will only <b>shallowly compare</b> complex objects in\n        the props object.\n      </Typography>\n    </Section>\n  )\n}\n\nMemoCustomComparison.displayName = \"MemoCustomComparison\"\n\nexport { MemoCustomComparison }\n","import {\n  FunctionComponent,\n  useState,\n  memo,\n  CSSProperties,\n  useMemo,\n} from \"react\"\nimport { useRenderPaint } from \"../../hooks/use-render-paint\"\nimport { Button } from \"../../components/button\"\nimport styles from \"../common/styles.module.css\"\n\nexport const CounterAndCircleText = `\nconst MemoizedCircle = memo(Circle)\n\nconst Counter = () => {\n  const [counter, setCounter] = useState(0)\n  const style = useMemo(() => ({ backgroundColor: \"#666\" }), [])\n\n  return (\n    <div>\n      <Button onClick={() => setCounter(counter + 1)}>\n        Increase {counter}\n      </Button>\n      <MemoizedCircle text={counter} />\n      <MemoizedCircle text=\"hi\" style={style} />\n    </div>\n  )\n}\n\nexport { Counter }\n`\n\nconst Circle: FunctionComponent<{\n  text: string | number\n  style?: CSSProperties\n}> = ({ text, style }) => {\n  const targetProps = useRenderPaint<HTMLDivElement>()\n\n  return (\n    <div className={styles.circle} style={style} {...targetProps}>\n      {text}\n    </div>\n  )\n}\n\nconst MemoizedCircle = memo(Circle)\n\nconst Counter: FunctionComponent = () => {\n  const [counter, setCounter] = useState(0)\n  const style = useMemo(() => ({ backgroundColor: \"#666\" }), [])\n\n  return (\n    <div>\n      <Button onClick={() => setCounter(counter + 1)}>\n        Increase {counter}\n      </Button>\n      <MemoizedCircle text={counter} />\n      <MemoizedCircle text=\"hi\" style={style} />\n    </div>\n  )\n}\n\nexport { Counter }\n","import { FunctionComponent } from \"react\"\nimport { Typography } from \"../../components/typography\"\nimport { Counter, CounterAndCircleText } from \"./counter\"\nimport { Section } from \"../../containers/section\"\nimport { CodeWithResult } from \"../../components/code-with-result\"\n\nconst UseMemo: FunctionComponent = () => {\n  return (\n    <Section header=\"useMemo\" secondHeader=\"Memorizing values\">\n      <div>\n        <Typography variant=\"p\">\n          We can use useMemo hook to memoize values:\n        </Typography>\n        <CodeWithResult code={CounterAndCircleText}>\n          <Counter />\n        </CodeWithResult>\n        <Typography variant=\"p\">\n          We can also use useMemo for creating heavy values.\n        </Typography>\n      </div>\n    </Section>\n  )\n}\n\nUseMemo.displayName = \"UseMemo\"\n\nexport { UseMemo }\n","import { FunctionComponent, useState, CSSProperties, useMemo } from \"react\"\nimport { useRenderPaint } from \"../../hooks/use-render-paint\"\nimport { Button } from \"../../components/button\"\nimport styles from \"../common/styles.module.css\"\n\nexport const CounterAndCircleText = `\n\nconst Counter = () => {\n  const [counter, setCounter] = useState(0)\n  const [counter1, setCounter1] = useState(0)\n  const memoizedCircle = useMemo(\n    () => <Circle text=\"hi\" />,\n    [counter1]\n  )\n\n  return (\n    <div>\n      <Button onClick={() => setCounter(counter + 1)}>\n        Increase {counter}\n      </Button>\n      <Button onClick={() => setCounter1(counter1 + 1)}>\n        Increase {counter1}\n      </Button>\n      {memoizedCircle}\n    </div>\n  )\n}\n\nexport { Counter }\n`\n\nconst Circle: FunctionComponent<{\n  text: string | number\n  style?: CSSProperties\n}> = ({ text, style }) => {\n  const targetProps = useRenderPaint<HTMLDivElement>()\n\n  return (\n    <div className={styles.circle} style={style} {...targetProps}>\n      {text}\n    </div>\n  )\n}\n\nconst Counter: FunctionComponent = () => {\n  const [counter, setCounter] = useState(0)\n  const [counter1, setCounter1] = useState(0)\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const memoizedCircle = useMemo(() => <Circle text=\"hi\" />, [counter1])\n\n  return (\n    <div>\n      <Button onClick={() => setCounter(counter + 1)}>\n        Increase {counter}\n      </Button>\n      <Button onClick={() => setCounter1(counter1 + 1)}>\n        Increase {counter1}\n      </Button>\n      {memoizedCircle}\n    </div>\n  )\n}\n\nexport { Counter }\n","import { FunctionComponent } from \"react\"\nimport { Typography } from \"../../components/typography\"\nimport { Counter, CounterAndCircleText } from \"./counter\"\nimport { Section } from \"../../containers/section\"\nimport { CodeWithResult } from \"../../components/code-with-result\"\n\nconst UseMemoForComponents: FunctionComponent = () => {\n  return (\n    <Section header=\"useMemo\" secondHeader=\"Memorizing components\">\n      <div>\n        <Typography variant=\"p\">\n          We can memoize components with useMemo to control according to{\" \"}\n          <b>parent dependencies</b>:\n        </Typography>\n        <CodeWithResult code={CounterAndCircleText}>\n          <Counter />\n        </CodeWithResult>\n      </div>\n    </Section>\n  )\n}\n\nUseMemoForComponents.displayName = \"UseMemoForComponents\"\n\nexport { UseMemoForComponents }\n","import { useState } from \"react\"\n\nconst useList = <Type>(\n  initialList: Type[]\n): {\n  list: Type[]\n  shuffle: () => void\n} => {\n  const [list, setList] = useState(initialList)\n\n  const shuffle = () => {\n    let shuffled = list\n      .map((value) => ({ value, sort: Math.random() }))\n      .sort((a, b) => a.sort - b.sort)\n      .map(({ value }) => value)\n    setList(shuffled)\n  }\n\n  return { list, shuffle }\n}\n\nexport { useList }\n","import { FunctionComponent, memo } from \"react\"\nimport { useRenderPaint } from \"../../hooks/use-render-paint\"\nimport { Button } from \"../../components/button\"\nimport styles from \"../common/styles.module.css\"\nimport { useList } from \"../../hooks/use-list\"\n\nexport const List1Text = `\nconst items = [\n  \"banana\", \"apple\", \"carrot\",\n  \"grape\", \"peach\"\n]\n\nconst Item = ({ text }) => {\n  const targetProps = useRenderPaint()\n  return <li {...targetProps}>{text}</li>\n}\n\nconst List = () => {\n  const { list, shuffle } = useList(items)\n\n  return (\n    <div>\n      <ul>\n        {list.map((el) => (\n          <Item key={el} text={el} />\n        ))}\n      </ul>\n      <Button onClick={shuffle}>Shuffle</Button>\n    </div>\n  )\n}\n\nexport { List }\n`\n\nexport const List2Text = `\nconst MemoizedItem = memo(Item)\n\nconst List = () => {\n  const { list, shuffle } = useList(items)\n\n  return (\n    <div>\n      <ul>\n        {list.map((el) => (\n          <MemoizedItem text={el} />\n        ))}\n      </ul>\n      <Button onClick={shuffle}>Shuffle</Button>\n    </div>\n  )\n}\n\nexport { List }\n`\n\nexport const List3Text = `\nconst MemoizedItem = memo(Item)\n\nconst List = () => {\n  const { list, shuffle } = useList(items)\n\n  return (\n    <div>\n      <ul>\n        {list.map((el) => (\n          <MemoizedItem key={el} text={el} />\n        ))}\n      </ul>\n      <Button onClick={shuffle}>Shuffle</Button>\n    </div>\n  )\n}\n\nexport { List }\n`\n\nconst items = [\"banana\", \"apple\", \"carrot\", \"grape\", \"peach\"]\n\nconst Item: FunctionComponent<{ text?: string | number }> = ({ text }) => {\n  const targetProps = useRenderPaint<HTMLLIElement>()\n\n  return (\n    <li className={styles.listItem} {...targetProps}>\n      {text}\n    </li>\n  )\n}\n\nconst MemoizedItem = memo(Item)\n\nconst List1: FunctionComponent = () => {\n  const { list, shuffle } = useList(items)\n\n  return (\n    <div>\n      <ul>\n        {list.map((el) => (\n          <Item key={el} text={el} />\n        ))}\n      </ul>\n      <Button onClick={shuffle}>Shuffle</Button>\n    </div>\n  )\n}\n\nconst List2: FunctionComponent = () => {\n  const { list, shuffle } = useList(items)\n\n  return (\n    <div>\n      <ul>\n        {list.map((el) => (\n          <MemoizedItem text={el} />\n        ))}\n      </ul>\n      <Button onClick={shuffle}>Shuffle</Button>\n    </div>\n  )\n}\n\nconst List3: FunctionComponent = () => {\n  const { list, shuffle } = useList(items)\n\n  return (\n    <div>\n      <ul>\n        {list.map((el) => (\n          <MemoizedItem key={el} text={el} />\n        ))}\n      </ul>\n      <Button onClick={shuffle}>Shuffle</Button>\n    </div>\n  )\n}\n\nexport { List1, List2, List3 }\n","import { FunctionComponent } from \"react\"\nimport { Typography } from \"../../components/typography\"\nimport { List1, List1Text, List2, List2Text, List3, List3Text } from \"./list\"\nimport { Section } from \"../../containers/section\"\nimport { CodeWithResult } from \"../../components/code-with-result\"\n\nconst Lists: FunctionComponent = () => {\n  return (\n    <Section header=\"Lists\" secondHeader=\"Memorizing list items\">\n      <div>\n        <Typography variant=\"p\">\n          Let's see what happens if we shuffle list items with keys:\n        </Typography>\n        <CodeWithResult code={List1Text}>\n          <List1 />\n        </CodeWithResult>\n        <Typography variant=\"p\">\n          Also, we can examine memoized items without keys:\n        </Typography>\n        <CodeWithResult code={List2Text}>\n          <List2 />\n        </CodeWithResult>\n        <Typography variant=\"p\">\n          The great recipe = <b>memo + keys</b>;\n        </Typography>\n        <CodeWithResult code={List3Text}>\n          <List3 />\n        </CodeWithResult>\n      </div>\n    </Section>\n  )\n}\n\nLists.displayName = \"Lists\"\n\nexport { Lists }\n","import { FunctionComponent, useState, memo, useCallback } from \"react\"\nimport { useRenderPaint } from \"../../hooks/use-render-paint\"\nimport { Button } from \"../../components/button\"\n\nexport const Counter1Text = `\nconst IncreaseButton = ({ onClick }) => {\n  const targetProps = useRenderPaint()\n\n  return (\n    <Button onClick={onClick} {...targetProps}>\n      Increase\n    </Button>\n  )\n}\n\nconst MemoizedIncreaseButton = memo(IncreaseButton)\n\nconst Counter = () => {\n  const [counter, setCounter] = useState(0)\n\n  return (\n    <div>\n      <p>{counter}</p>\n      <MemoizedIncreaseButton\n        onClick={() => setCounter(counter + 1)}\n      />\n    </div>\n  )\n}\n\nexport { Counter }\n`\n\nexport const Counter2Text = `\nconst MemoizedIncreaseButton = memo(IncreaseButton)\n\nconst Counter = () => {\n  const [counter, setCounter] = useState(0)\n  const memoizedOnClick = useCallback(\n    () => setCounter(counter + 1),\n    [counter]\n  )\n\n  return (\n    <div>\n      <p>{counter}</p>\n      <MemoizedIncreaseButton\n        onClick={memoizedOnClick}\n      />\n    </div>\n  )\n}\n\nexport { Counter }\n`\n\nexport const Counter3Text = `\nconst MemoizedIncreaseButton = memo(IncreaseButton)\n\nconst Counter = () => {\n  const [counter, setCounter] = useState(0)\n  const memoizedOnClick = useCallback(\n    () => setCounter(counter => counter + 1),\n    []\n  )\n\n  return (\n    <div>\n      <p>{counter}</p>\n      <MemoizedIncreaseButton\n        onClick={memoizedOnClick}\n      />\n    </div>\n  )\n}\n\nexport { Counter }\n`\n\nconst IncreaseButton: FunctionComponent<{\n  onClick: () => unknown\n}> = ({ onClick }) => {\n  const targetProps = useRenderPaint<HTMLDivElement>()\n\n  return (\n    <div {...targetProps}>\n      <Button onClick={onClick}>Increase</Button>\n    </div>\n  )\n}\n\nconst MemoizedIncreaseButton = memo(IncreaseButton)\n\nconst Counter1: FunctionComponent = () => {\n  const [counter, setCounter] = useState(0)\n\n  return (\n    <div>\n      <p>{counter}</p>\n      <MemoizedIncreaseButton onClick={() => setCounter(counter + 1)} />\n    </div>\n  )\n}\n\nconst Counter2: FunctionComponent = () => {\n  const [counter, setCounter] = useState(0)\n  const memoizedOnClick = useCallback(() => setCounter(counter + 1), [counter])\n\n  return (\n    <div>\n      <p>{counter}</p>\n      <MemoizedIncreaseButton onClick={memoizedOnClick} />\n    </div>\n  )\n}\n\nconst Counter3: FunctionComponent = () => {\n  const [counter, setCounter] = useState(0)\n  const memoizedOnClick = useCallback(\n    () => setCounter((counter) => counter + 1),\n    []\n  )\n\n  return (\n    <div>\n      <p>{counter}</p>\n      <MemoizedIncreaseButton onClick={memoizedOnClick} />\n    </div>\n  )\n}\n\nexport { Counter1, Counter2, Counter3 }\n","import { FunctionComponent } from \"react\"\nimport { Typography } from \"../../components/typography\"\nimport {\n  Counter1,\n  Counter1Text,\n  Counter2,\n  Counter2Text,\n  Counter3,\n  Counter3Text,\n} from \"./counter\"\nimport { Section } from \"../../containers/section\"\nimport { CodeWithResult } from \"../../components/code-with-result\"\n\nconst UseCallback: FunctionComponent = () => {\n  return (\n    <Section header=\"useCallback\" secondHeader=\"Memorizing callback functions\">\n      <div>\n        <Typography variant=\"p\">\n          Lets see what happens if we pass an anonymous function in the jsx:\n        </Typography>\n        <CodeWithResult code={Counter1Text}>\n          <Counter1 />\n        </CodeWithResult>\n        <Typography variant=\"p\">\n          Let's try to memoize the callback func with the useCallback hook:\n        </Typography>\n        <CodeWithResult code={Counter2Text}>\n          <Counter2 />\n        </CodeWithResult>\n        <Typography variant=\"p\">\n          We can pas an updater function to setState and remove the troublemaker counter dependency:\n        </Typography>\n        <CodeWithResult code={Counter3Text}>\n          <Counter3 />\n        </CodeWithResult>\n      </div>\n    </Section>\n  )\n}\n\nUseCallback.displayName = \"UseCallback\"\n\nexport { UseCallback }\n","export default __webpack_public_path__ + \"static/media/context-component-tree-1.82768c38.svg\";","export default __webpack_public_path__ + \"static/media/context-component-tree-2.d8485e21.svg\";","export default __webpack_public_path__ + \"static/media/context-component-tree-3.45874df7.svg\";","import { FunctionComponent } from \"react\"\nimport { Typography } from \"../../components/typography\"\nimport { Section } from \"../../containers/section\"\nimport contextComponentTree1 from \"../../assets/diagrams/context-component-tree-1.svg\"\nimport contextComponentTree2 from \"../../assets/diagrams/context-component-tree-2.svg\"\nimport contextComponentTree3 from \"../../assets/diagrams/context-component-tree-3.svg\"\n\nconst ContextRenderingBehavior: FunctionComponent = () => {\n  return (\n    <Section\n      header=\"Context API\"\n      secondHeader=\"Render behavior of React Context API\"\n    >\n      <div>\n        <Typography variant=\"p\">\n          A component tree with a context provider looked something like this:\n        </Typography>\n        <img src={contextComponentTree1} alt=\"\" />\n        <Typography variant=\"p\">\n          CounterControl component that consumes counter context trigger a\n          change at the context:\n        </Typography>\n        <img src={contextComponentTree2} alt=\"\" />\n        <Typography variant=\"p\">React takes a different approach:</Typography>\n        <img src={contextComponentTree3} alt=\"\" />\n      </div>\n    </Section>\n  )\n}\n\nContextRenderingBehavior.displayName = \"ContextRenderingBehavior\"\n\nexport { ContextRenderingBehavior }\n","import {\n  FunctionComponent,\n  useState,\n  Context,\n  createContext,\n  useContext,\n} from \"react\"\nimport { useRenderPaint } from \"../../hooks/use-render-paint\"\nimport { Button } from \"../../components/button\"\nimport styles from \"./rendering-with-context.module.css\"\nimport { Circle } from \"../common/circle\"\n\nexport const Counter1Text = `\nconst CounterControl = ({ counterValues }) => {\n  const targetProps = useRenderPaint()\n  const { counter, setCounter } = counterValues;\n\n  return (\n    <div {...targetProps}>\n      <p>{counter}</p>\n      <Button\n        onClick={() => setCounter(counter + 1)}\n      >\n       Increase\n      </Button>\n    </div>\n  )\n}\n\nconst Counter = ({ counterValues }) => {\n  return (\n    <div>\n      <CounterControl counterValues={counterValues} />\n      <Circle text=\"hi\" />\n    </div>\n  )\n}\n\nconst CounterApp = () => {\n  const [counter, setCounter] = useState(0)\n  const counterValues = { counter, setCounter }\n\n  return (\n    <Counter counterValues={counterValues} />\n  )\n}\n\nexport { CounterApp }\n`\n\nexport const Counter2Text = `\nconst WithCounter = ({ children }) => {\n  const [counter, setCounter] = useState(0)\n\n  return (\n    <CounterContext.Provider\n      value={{ counter, setCounter }}\n    >\n      {children}\n    </CounterContext.Provider>\n  )\n}\n\nconst useCounter = () => useContext(CounterContext)\n\nconst CounterControl = () => {\n  const { counter, setCounter } = useCounter()\n  const targetProps = useRenderPaint()\n\n  return (\n    <div {...targetProps}>\n      <p>{counter}</p>\n      <Button\n        onClick={() => setCounter(counter + 1)}\n      >\n       Increase\n      </Button>\n    </div>\n  )\n}\n\nconst Counter = () => {\n  return (\n    <div>\n      <CounterControl />\n      <Circle text=\"hi\" />\n    </div>\n  )\n}\n\nconst CounterApp = () => {\n  return (\n    <WithCounter>\n      <Counter />\n    </WithCounter>\n  )\n}\n\nexport { CounterApp }\n`\n\ninterface CounterContext {\n  counter: number\n  setCounter: (counter: number) => void\n}\n\nconst defaultContext: CounterContext = {\n  counter: 0,\n  setCounter: () => undefined,\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nconst CounterContext: Context<CounterContext> = createContext(defaultContext)\n\nconst useCounter = () => useContext(CounterContext)\n\nconst WithCounter: FunctionComponent = ({ children }) => {\n  const [counter, setCounter] = useState(0)\n\n  return (\n    <CounterContext.Provider value={{ counter, setCounter }}>\n      {children}\n    </CounterContext.Provider>\n  )\n}\n\nconst CounterControl1: FunctionComponent<{ counterValues: CounterContext }> = ({\n  counterValues,\n}) => {\n  const targetProps = useRenderPaint<HTMLDivElement>()\n  const { counter, setCounter } = counterValues\n\n  return (\n    <div className={styles.counterControl} {...targetProps}>\n      <p>{counter}</p>\n      <Button onClick={() => setCounter(counter + 1)}>Increase</Button>\n    </div>\n  )\n}\n\nconst CounterControl2: FunctionComponent = () => {\n  const { counter, setCounter } = useCounter()\n  const targetProps = useRenderPaint<HTMLDivElement>()\n\n  return (\n    <div className={styles.counterControl} {...targetProps}>\n      <p>{counter}</p>\n      <Button onClick={() => setCounter(counter + 1)}>Increase</Button>\n    </div>\n  )\n}\n\nconst Counter1: FunctionComponent<{ counterValues: CounterContext }> = ({\n  counterValues,\n}) => {\n  return (\n    <div>\n      <CounterControl1 counterValues={counterValues} />\n      <Circle text=\"hi\" />\n    </div>\n  )\n}\n\nconst Counter2: FunctionComponent = () => {\n  return (\n    <div>\n      <CounterControl2 />\n      <Circle text=\"hi\" />\n    </div>\n  )\n}\n\nconst CounterApp1: FunctionComponent = () => {\n  const [counter, setCounter] = useState(0)\n  const counterValues = { counter, setCounter }\n\n  return <Counter1 counterValues={counterValues} />\n}\n\nconst CounterApp2: FunctionComponent = () => {\n  return (\n    <WithCounter>\n      <Counter2 />\n    </WithCounter>\n  )\n}\n\nexport { CounterApp1, CounterApp2 }\n","import { FunctionComponent } from \"react\"\nimport { Typography } from \"../../components/typography\"\nimport { CounterApp1, Counter1Text, CounterApp2, Counter2Text } from \"./counter\"\nimport { Section } from \"../../containers/section\"\nimport { CodeWithResult } from \"../../components/code-with-result\"\n\nconst RenderingWithContext: FunctionComponent = () => {\n  return (\n    <Section\n      header=\"Context API\"\n      secondHeader=\"Rendering with and without context\"\n    >\n      <div>\n        <Typography variant=\"p\">\n          Let's try to use counter mechanism with props as usual:\n        </Typography>\n        <CodeWithResult code={Counter1Text}>\n          <CounterApp1 />\n        </CodeWithResult>\n        <Typography variant=\"p\">What if we use the context api:</Typography>\n        <CodeWithResult code={Counter2Text}>\n          <CounterApp2 />\n        </CodeWithResult>\n      </div>\n    </Section>\n  )\n}\n\nRenderingWithContext.displayName = \"RenderingWithContext\"\n\nexport { RenderingWithContext }\n","import { FunctionComponent } from \"react\"\nimport styles from \"./app.module.css\"\nimport { Slider } from \"../../components/slider\"\nimport { PaintingRenders } from \"../../sections/painting-renders\"\nimport { ChangeInTheState } from \"../../sections/change-in-the-state\"\nimport { ChangeInTheProps } from \"../../sections/change-in-the-props\"\nimport { RenderingOfParent } from \"../../sections/rendering-of-parent\"\nimport { TextSection } from \"../text-section\"\nimport { RenderBehavior } from \"../../sections/render-behavior\"\nimport { Memo } from \"../../sections/memo\"\nimport { NewReferencesInProps } from \"../../sections/new-references-in-props\"\nimport { MemoCustomComparison } from \"../../sections/memo-custom-comparison\"\nimport { UseMemo } from \"../../sections/use-memo\"\nimport { UseMemoForComponents } from \"../../sections/use-memo-for-components\"\nimport { Lists } from \"../../sections/lists\"\nimport { UseCallback } from \"../../sections/use-callback\"\nimport { ContextRenderingBehavior } from \"../../sections/context-rendering-behavior\"\nimport { RenderingWithContext } from \"../../sections/rendering-with-context\"\n\nconst App: FunctionComponent = () => {\n  return (\n    <div className={styles.container}>\n      <Slider\n        slides={[\n          <TextSection\n            key={-1}\n            header=\"React Optimization Tips\"\n          >\n            <img\n              src=\"https://www.webperf.ist/images/logo/logo.svg\"\n              alt=\"Webperf.ist logo\"\n              className=\"circle white-logo\"\n              width={300}\n              height={300}\n            />\n          </TextSection>,\n          <TextSection\n            key={-1}\n            header=\"Who am I?\"\n            secondHeader=\"Yunus Emre Dilber\"\n          >\n            <img\n              src=\"https://github.com/yunusemredilber.png\"\n              alt=\"My profile pic\"\n              className=\"circle\"\n              width={300}\n              height={300}\n            />\n          </TextSection>,\n          <TextSection\n            key={0}\n            header=\"Before starting the journey\"\n            text=\"Fix the slow render before you fix the re-render!\"\n          />,\n          <PaintingRenders key={1} />,\n          <ChangeInTheState key={2} />,\n          <ChangeInTheProps key={3} />,\n          <RenderingOfParent key={4} />,\n          <TextSection\n            key={5}\n            header=\"Components always re-render\"\n            text=\"React does not care whether “props changed” - it will render child components unconditionally just because the parent rendered! - Mark Erikson\"\n          />,\n          <RenderBehavior key={6} />,\n          <Memo key={7} />,\n          <NewReferencesInProps key={8} />,\n          <MemoCustomComparison key={9} />,\n          <UseMemo key={10} />,\n          <UseMemoForComponents key={11} />,\n          <TextSection\n            key={12}\n            header=\"Should We Memoize Everything?\"\n            text=\"Only if it's going to make a difference in behavior for the child.\"\n          />,\n          <Lists key={13} />,\n          <UseCallback key={14} />,\n          <TextSection\n            key={15}\n            header=\"Should We Use useCallback All The Time?\"\n            text=\"It's okay to pass down new references like callback functions and objects most of the time.\"\n          />,\n          <ContextRenderingBehavior key={16} />,\n          <RenderingWithContext key={17} />,\n          <TextSection\n            key={15}\n            header=\"React Profiling\"\n            text=\"We will examine an example ->\"\n          />,\n        ]}\n      />\n    </div>\n  )\n}\n\nApp.displayName = \"App\"\n\nexport { App }\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./assets/reset.css\"\nimport \"./assets/variables.css\"\nimport \"./assets/highlight.css\"\nimport \"./assets/globals.css\"\nimport { App } from \"./containers/app\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nconst rootElement = document.getElementById(\"root\")\nif (!rootElement) throw new Error(\"Failed to find the root element\")\n\nconst root = ReactDOM.createRoot(rootElement)\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}